# 📘 Backend Nómina

## 🏗️ Arquitectura y Estructura del Proyecto

Este proyecto está basado en los principios de **DDD (Domain-Driven Design)**, **arquitectura hexagonal** y **principios SOLID**, separando claramente las responsabilidades entre dominio, aplicación, infraestructura y entrada/salida.

```
app/
├── domain/                         # Modelo de dominio puro
│   ├── models/                    # Entidades del dominio (Empresa, Centro, etc.)
│   └── repositories/             # Interfaces abstractas de repositorios
├── application/                   # Casos de uso (servicios de aplicación)
│   └── use_cases/
│       └── <entidad>/            # Casos de uso por entidad (crear, listar, etc.)
├── infrastructure/
│   ├── db/                       # Configuración de la BBDD y modelos SQLAlchemy
│   │   ├── session.py           # Conexion con SQLAlchemy
│   │   └── models/
│   ├── repositories/            # Implementaciones concretas de repositorios
│   └── interfaces/
│       └── api/                 # Rutas de FastAPI
scripts/                          # Scripts para poblar y testear
```

## 🧠 Entidades implementadas hasta ahora

- `Organización`
- `Empresa`
- `Centro`

Cada una con su CRUD completo: modelo, repositorio abstracto, casos de uso, infraestructura y endpoints.

## ✍️ Cómo crear una nueva entidad (CRUD completo)

1. **Modelo de dominio**: `domain/models/<entidad>.py`
2. **Interfaz de repositorio**: `domain/repositories/<entidad>_repository.py`
3. **Casos de uso**: `application/use_cases/<entidad>/crear.py`, `listar.py`, etc.
4. **Modelo SQLAlchemy**: `infrastructure/db/models/<entidad>_model.py`
5. **Repositorio MySQL**: `infrastructure/repositories/<entidad>_repository_mysql.py`
6. **Rutas FastAPI**: `infrastructure/interfaces/api/<entidad>_routes.py`
7. **Registrar el router** en `main.py`

## 🔄 Flujo de información

1. 🧑‍💻 El cliente envía una petición HTTP → `FastAPI` la recibe en `/entidad`  
2. 🔄 Se llama al caso de uso correspondiente (por ejemplo, `CrearEmpresa`)  
3. 💼 El caso de uso utiliza un repositorio que implementa la interfaz definida en dominio  
4. 🛢️ La implementación del repositorio accede a la BBDD vía SQLAlchemy  
5. 📤 El caso de uso devuelve los datos transformados o una confirmación  
6. 🌐 El endpoint devuelve la respuesta HTTP al cliente

## 🚀 Comandos Docker básicos

### Construir y levantar contenedores
```bash
docker-compose up --build
```

### Acceder al contenedor backend
```bash
docker exec -it backend_nomina bash
```

### Poblar base de datos con datos dummy
```bash
docker exec -it backend_nomina python scripts/poblar_tablas.py
```

### Probar endpoints con script de pruebas
```bash
docker exec -it backend_nomina python scripts/test_endpoints.py
```

### Reconstruir (si modificas Dockerfile o requirements.txt)
```bash
docker-compose build --no-cache
```

### VER LOGS
```bash
docker compose logs -f
```



## ✅ Buenas prácticas

- Nunca contamines el dominio con SQLAlchemy, FastAPI o detalles técnicos.
- Cada capa tiene su responsabilidad: **modelo limpio**, **servicio orquestador**, **infraestructura concreta**.
- Añade validaciones de negocio en los **casos de uso o modelo de dominio**, según corresponda.


# 🔐 Seguridad y Autenticación con JWT

Este backend implementa un sistema de autenticación robusto basado en **OAuth2 Password Flow + JWT con scopes**, totalmente integrado con FastAPI y compatible con Swagger UI.

---

## 🧱 ¿Cómo funciona?

Se utiliza `OAuth2PasswordBearer` como esquema de autenticación y los endpoints están protegidos mediante:

```python
user = Security(get_current_user, scopes=["read"])
```

Esto obliga a:
- ✅ Enviar un token JWT válido con cada petición.
- ✅ Que el token contenga los `scopes` necesarios para acceder al recurso.

Los tokens son creados en `jwt_utiles.py`, verificados en `deps.py`, y consumidos mediante `Security(...)`.

---

## 🛠️ Ciclo completo de autenticación

### 1. Registrar el usuario `admin`

Este usuario puede registrar otros clientes API:

```http
POST /auth/registro
Content-Type: application/json

{
  "username": "admin",
  "password": "123456"
}
```

---

### 2. Login del `admin` y obtención de token

```http
POST /auth/token
Content-Type: application/x-www-form-urlencoded

username=admin
password=123456
```

Respuesta esperada:

```json
{
  "access_token": "eyJhbGciOi...",
  "token_type": "bearer"
}
```

---

### 3. Registro de nuevos clientes (requiere token de `admin`)

```http
POST /auth/registro
Authorization: Bearer <TOKEN_ADMIN>
Content-Type: application/json

{
  "username": "cliente001",
  "password": "pass123"
}
```

---

### 4. Login del cliente y obtención de su token

```http
POST /auth/token
Content-Type: application/x-www-form-urlencoded

username=cliente001
password=pass123
```

---

### 5. Acceso a endpoints protegidos

Los clientes deben incluir el token JWT en cada petición protegida:

```http
Authorization: Bearer <access_token>
```

O bien usar el botón "Authorize" en Swagger.

---

## 🔐 Scopes disponibles

| Scope   | Descripción                          |
|---------|--------------------------------------|
| `read`  | Acceso de lectura a recursos         |
| `write` | Creación y modificación de datos     |
| `admin` | Gestión de usuarios y administración |

---

## ✅ Cómo proteger un endpoint

```python
@router.get("/empresas")
def listar(user = Security(get_current_user, scopes=["read"])):
    ...
```

Esto hace que el endpoint requiera un token válido y el scope `"read"`.

---

## ❌ Cómo desproteger un endpoint

```python
# Antes
def listar(user = Security(get_current_user, scopes=["read"])):
    ...

# Después (sin seguridad)
def listar():
    ...
```

Esto hace que el endpoint sea público. Úsalo con cuidado.

---

## 📚 Swagger UI y el botón "Authorize"

1. Pulsa "Authorize" en Swagger.
2. Introduce `username`, `password` y selecciona los scopes.
3. Swagger obtiene el token desde `/auth/token`.
4. El token se usará automáticamente en todas las peticiones protegidas.

---

## 📦 Archivos clave

- `auth_routes.py`: login y registro de clientes
- `jwt_utiles.py`: generación y verificación de tokens
- `deps.py`: validación de token y control de scopes
- `config.py`: configuración del JWT (clave secreta, algoritmo, expiración)
